import Mathlib.Order.Birkhoff
import Mathlib.Order.GaloisConnection

open LatticeHom Set

/-%%
In this file, we give a complete proof of Birkhoff Duality, that is:

the category of finite distributive lattices with homomorphisms
is dually equivalent to
the category of finite posets with monotone functions.

Throughout the file, let $L$ be a finite distributive lattice,
and $P$ a finite partial order.
%%-/

variable (L P : Type)
variable [DistribLattice L] [Fintype L]
variable [PartialOrder P] [Fintype P]

/-%%
\begin{definition}\label{join-irreducible}\lean{SupIrred}
An element $x$ of a finite distributive lattice $L$ is \emph{join-irreducible} if
$x \neq \bot$ and, for every $y, z \in L$ such that $x = y \vee z$, we have
$x = y$ or $x = z$.
\end{definition}

\begin{definition}\label{lower set}\lean{IsLowerSet}
A subset $S$ of a finite partial order $P$ is a \emph{lower set} (also known as \emph{down-set})
if any element that is less than a member of $S$ is also a member of $S$.
\end{definition}

The set of join-irreducible elements of $L$ is a finite poset, when equipped with the
partial order induced by the set of join-irreducible elements.
%%-/

example : PartialOrder {a : L // SupIrred a} := Subtype.partialOrder fun a ↦ SupIrred a

/-%%
The set of lower sets of $P$ is a finite distributive lattice, when equipped with the
operations of union and intersection.
%%-/

example : DistribLattice (LowerSet P) := by infer_instance

/-%%
The dual equivalence, modulo a category-theoretic fact that is already in Mathlib (TODO: find it),
comes down to the following two concrete facts about the assignment (functor) that sends the
finite distributive lattice L to the poset of join-irreducible elements:

First, the assignment is essentially surjective.
\begin{proposition}[Essential surjectivity]\label{EssSurjFinDL}\lean{OrderIso.supIrredLowerSet'}
The function from the poset $P$ to the poset of join-irreducible elements of the distributive
lattice of lower sets of $P$, which sends each $p \in P$ to the lower set generated by $p$,
is a well-defined isomorphism of partial orders.
\end{proposition}
%%-/

/- NB: there is a similar statement to the above proposition in Mathlib,
but it is not general enough, as it only treats
the case where P is a distributive lattice. But all that is needed is that P is a finite poset. -/
#check OrderIso.supIrredLowerSet

-- To prove Proposition~{EssSurjFinDL}, we will need:
-- A join-irreducible`SupIrred` element of the lattice of lower sets has a unique maximal element.
-- TODO is it in the library?
lemma maximalElementOfJoinIrreducibleLowerSet {s : LowerSet P} (h : SupIrred s) :
  { m : P // m ∈ s ∧ ∀ (p : P), p ∈ s → p ≤ m } := by sorry

-- Filippo's Trials
#help tactic simp_all

example : Top (LowerSet P) := LowerSet.instTopLowerSet

variable {P}

def fae (s : LowerSet P)/-  (h : SupIrred s) -/ : Set P :=
  { m : P | m ∈ s ∧ ∀ (p : P), p ∈ s → p ≤ m } --:= by sorry

-- lemma uno (s : LowerSet P) /- (h : SupIrred s)  -/: fae s ⊆ s := by
--   intro a ha
--   rw [fae] at ha
--   simp_all only [mem_setOf_eq, SetLike.mem_coe]

def sam (s : LowerSet P) : Set s := λ x ↦ (fae s) x

lemma uno (s : LowerSet P) : IsTop (sam s) := by sorry
lemma due (s : LowerSet P) : IsMax (sam s) := (uno s).isMax

lemma tre (s : LowerSet P) (M : Set s) (hM : IsMax M) : M = sam s := by sorry


-- lemma due {s : LowerSet P} (h : SupIrred s) : fae P s := by sorry

-- #check fae P



-- The proposition is then the following:
def OrderIso.supIrredLowerSet' : P ≃o {s : LowerSet P // SupIrred s} := by
  have f : P → LowerSet P := fun p => ⟨(fun q => q ≤ p), ?_⟩
  have g : {s : LowerSet P // SupIrred s} → P := fun ⟨s, hs⟩ => (maximalElementOfJoinIrreducibleLowerSet _ hs)
  -- TODO: show that f and g are an equivalence, and then:
  apply Equiv.toOrderIso
  all_goals sorry


/-%%
Second, the assignment is a full and faithful functor. We break this up in a number of steps. Throughout the argument, let $L$ and $M$ be finite distributive lattices, and $h : L \to M$ a homomorphism between them.
%%-/

variable (M : Type) [DistribLattice M] [Fintype M]
variable (h : LatticeHom L M)

/-%%
(Note: what I would call an adjunction between posets is currently called a "Galois connection" in Mathlib - this choice of terminology is unusual.)
\begin{lemma}
Let $h : L \to M$ be a homomorphism between finite distributive lattices. Then there exists
a left adjoint $f : M \to L$ of $h$.
\end{lemma}
\begin{proof}
Since $L$ and $M$ are finite, they are complete. Now $h$ is a sup-preserving function,
so it has a left adjoint by the adjoint functor theorem (for complete lattices).
\end{proof}
%%-/

lemma leftAdjointExists : ∃ f : M → L, GaloisConnection f h := by sorry


/-%%
\begin{lemma}
Let $f$ be the left adjoint of $h$. For any join-irreducible $p$ of $M$, $f(p)$ is join-irreducible.
\end{lemma}
%%-/
lemma leftAdjointPreservesJoinIrreducible {f : M → L} {hfh : GaloisConnection f h}
  (p : M) (hp : SupIrred p) : SupIrred (f p) := by sorry


/-%%
\begin{proposition}[Fully faithful]\label{FullyFaithfulFinDL}
There is a bijection between the set of homomorphisms $L \to M$ and the set of monotone functions from the poset of join-irreducible elements of $M$ to the poset of join-irreducible elements of $L$.
\end{proposition}

Note that the bijection in the above proposition is even an order-isomorphism, which would be
needed if we wanted to establish a Poset-enriched dual equivalence of categories. But it is not
automatic in Mathlib that LatticeHom L M is a poset, so we do not state this stronger result here.
%%-/

theorem FullyFaithfulFinDL : (LatticeHom L M) ≃ ({a : M // SupIrred a} →o {a : L // SupIrred a})
  := by sorry

/-%%
After proving the above theorems, what remains to be done to formally establish Birkhoff duality
is the application of the category-theoretic fact that any functor that is essentially surjective,
full, and faithful is an equivalence of categories. This is a standard result in category theory,
and is already in Mathlib somewhere.
TODO: where?
%%-/
